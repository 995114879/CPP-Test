
cpp_srcs := $(shell find src -name "*.cpp")
cpp_objs := $(patsubst src%cpp,objs%o,$(cpp_srcs))



compile_options := -g -O3 -w

# 这是一个使用`g++`编译器编译C++代码的命令行指令，具体参数解释如下：

# - `g++`: 这是GNU编译器套件中的C++编译器。

# - `-c`: 表示编译源文件但不进行链接。这个标志告诉编译器只生成目标文件，而不生成可执行文件。

# - `src/main.cpp`: 指定要编译的源文件的路径和文件名。在这里，源文件是`main.cpp`，位于`src`目录下。

# - `-o objs/main.o`: 指定生成的目标文件的输出路径和文件名。在这里，目标文件将生成在`objs`目录下，文件名为`main.o`。

# - `-g`: 启用调试信息的生成。这将在目标文件中包含调试符号，以便在调试时能够进行源代码级别的调试。

# - `-O3`: 启用优化级别3。这表示进行高度优化，以提高生成的代码执行速度。`-O3`代表编译器进行最大程度的优化。

# - `-w`: 关闭编译器警告。这个标志告诉编译器不要生成警告信息，以减少输出中的噪声。

# 综合起来，这个命令编译了`src/main.cpp`文件，生成了一个经过高度优化的目标文件`objs/main.o`，其中包含调试信息，并关闭了编译器的警告。

#====================================================================================================================

# 在`-O`标志后面，你可以使用不同的优化级别。以下是一些常见的优化级别：

# - `-O0`: 无优化。编译速度最快，生成的代码最容易进行调试，但执行速度可能较慢。

# - `-O1`或`-O`: 低级别的优化。会进行一些基本的优化，但仍然保留足够的调试信息。

# - `-O2`: 中级别的优化。对代码进行更多的优化，以提高执行速度。仍然保留一定的调试信息。

# - `-O3`: 高级别的优化。进行更激进的优化，以最大程度提高执行速度，但可能会减少一些调试信息。

# - `-Os`: 优化代码大小。尝试优化生成的代码的大小，以减小可执行文件的体积。

# 每个优化级别都是一个折衷，更高级别的优化通常会导致编译时间增加，同时生成的代码执行速度更快。选择优化级别通常取决于项目的要求，包括调试需求、执行速度需求以及生成的可执行文件大小的重要性。

objs/%.o : src/%.cpp
	@echo Compile source to objects
	@mkdir -p $(dir $@)
	@g++ -c $^ -o $@ $(compile_options)


workspace/exec : $(cpp_objs)
	@echo Link to Executable
	@mkdir -p $(dir $@)
	@g++ $^ -o $@



run : workspace/exec
	@./$< -ss  jkolkd 


clean :
	@rm -rf objs workspace/exec


debug :
	@echo $(cpp_srcs)
	@echo $(cpp_objs)


.PHONY : run debug clean